Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?

    Because threads may have to wait until other threads finish updating results, which will add overhead time.


Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)

        Old personal computer only has 1 processor. Therefore, there is essentially one thread working on both the SequentialCrawler and ParallelCrawler. Therefore, ParallelCrawler will slow down because it needs to create all subtasks and then invoke using one thread, rather than directly going sequentially.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?

        Multiprocessor computers. It will be able to create more than 1 thread to distribute jobs. And threads can also steal jobs from other threads.


Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?

        Logging the performance and runtime of a method.

    (b) What are the join points of the Profiler in the web crawler program?

        Record and write methods in ProfilingState class.


Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.


    1) Builder in CrawlerConfiguration class, CrawlResult class.

       Like: Easier to construct object because I can directly map json properties to fields without manually type it

       Dislike: Looks more complicated because have to go call `CrawlerConfiguration.Builder.build()` rather than just do `new CrawlerConfiguration`

    2) Abstract Factory: PageParserFactory Interface

       Like: Easier to create different PageParseImpl with different urls but the same timeout and ignoreWords

       Dislike: Make codes more complicated to track and understand

    3) Dependency Injection: Profiler, Parser

       Like: Don't need to manually create objects

       Dislike: Make codes harder to understand and the Module section is hard to implement





